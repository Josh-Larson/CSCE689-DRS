cmake_minimum_required(VERSION 3.10.2)
project(CSCE689-DRS)

set(CMAKE_CXX_STANDARD 17)

find_package(OpenCV CONFIG REQUIRED )
if (OpenCV_FOUND)
	if (${OpenCV_VERSION} VERSION_LESS 4)
		message(FATAL_ERROR "Old opencv version '${OpenCV_VERSION}'. Aborting.")
	endif()
	message(STATUS "OpenCV information:")
	message(STATUS "    Version:   ${OpenCV_VERSION}")
	message(STATUS "    Includes:  ${OpenCV_INCLUDE_DIRS}")
	message(STATUS "    Libraries: ${OpenCV_LIBRARIES}")
else()
	message(FATAL_ERROR "No opencv found.")
endif()

# Find protobuf
include(FindProtobuf)
if (Protobuf_FOUND)
	if (${Protobuf_VERSION} VERSION_LESS 3)
		message(FATAL_ERROR "Old protobuf version '${Protobuf_VERSION}'. Aborting.")
	endif()
	message(STATUS "Protobuf information:")
	message(STATUS "    Version:   ${Protobuf_VERSION}")
	message(STATUS "    Includes:  ${Protobuf_INCLUDE_DIRS}")
	message(STATUS "    Libraries: ${Protobuf_LIBRARIES}")
else()
	message(FATAL_ERROR "No protobuf found.")
endif()

file(GLOB_RECURSE SOURCES src/*.cpp)
file(GLOB_RECURSE HEADERS src/*.h)
file(GLOB_RECURSE PROTOBUF protobuf/*.proto)
protobuf_generate_cpp(PROTO_SRC PROTO_HDR ${PROTOBUF})

include_directories(${Protobuf_INCLUDE_DIRS})
link_libraries(${Protobuf_LIBRARIES})
add_library(messages STATIC ${PROTO_SRC} ${PROTO_HDR})

include_directories(src ${CMAKE_BINARY_DIR} ${CMAKE_SOURCE_DIR}/3rd-party ${OpenCV_INCLUDE_DIRS})
link_libraries(pthread messages ${OpenCV_LIBRARIES})

add_executable(DRS main.cpp ${SOURCES} ${HEADERS} ${PROTO_HDR})
add_executable(DRS-Vincent test/Vincent.cpp ${SOURCES} ${HEADERS} ${PROTO_HDR})
add_executable(DRS-Josh test/Josh.cpp ${SOURCES} ${HEADERS} ${PROTO_HDR})
